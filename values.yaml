image:
  repository: pecan/bety
  tag: null
  checks: "ncsa/checks:1.0.1"
  pullPolicy: IfNotPresent

imagePullSecrets: []

## replicaCount is the number of instances for BETYDB. Each instance can also
## have multuiple workers as defined by workers below.
replicaCount: 1

## workers is the number of workers for each BETYDB replica. The total number
## of simultanous connections is replicaCount * workers.
workers: 1

## localServer is the ID for this intance. To be able to synchronize your data
## with the PEcAn network you will need to request a unique number. This can
## be done at https://forms.gle/m3SnMVh8WVHyL6eH8
localServer: 99

## remoteservers is the list of all remote servers you want to synchronize with.
## This is the list you will receive data from.
remoteServers: "0, 1, 2, 5"

## betyUser is the user that is used with PostgreSQL. BETYDB and PEcAn will use
## this user to connect to the database and read and write to the database. 
betyUser: bety

## betyPassword the password used when connecting to the database from BETYDB
## and PEcAn.
betyPassword: bety

## betyDatabase the database that will be created and that BETYDB adn PEcAn
## will connect to and write data.
betyDatabase: bety

## secretKey the key that will be used to encrypt the passwords. If this is
## changed users will not be able to login with their existing passwords.
secretKey: thisisnotasecret

## Set to true if you will be managing the `betydb` secret with external secrets. 
## The `betydb` secret includes `betyPassword`, `postgresqlPassword`, 
## and `secretKey`.
externalSecret: false

## dbtag is the tag of the database to load. Normally will use latest to
## make sure latest tag is loaded, this might not work with an older database.
## set this to "" to not load the database
dbtag: latest

## dburl is the url where to get the database from. If this is not set use
## the dbdump that is the PEcAn network. The default is not to use this.
dburl: ""

## addUsers is a hash of users that should be added to the database when it is
## initialized.
# data : 1=Restricted, 2=Internal, 3=External, 4=Public
# page : 1=Admin,      2=Manager,  3=Creator,  4=Viewer

users: []
  # - username: carya
  #   password: illinois
  #   fullname: Demo User
  #   email: betydb@gmail.com
  #   data: 1
  #   page: 1
  # - username: guestuser
  #   password: guestuser
  #   fullname: Guest User
  #   email: betydb@gmail.com
  #   data: 4
  #   page: 4

# customization of BETY:
# - application will be placed in config/application.yml
# - logos will be placed in public/images/custom
customization: {}
  # application: |
  #   organization:
  #     name: "TERRA Ref"
  #     url: #{root_path}
  #     logo_file: "custom/terraref-logo.png"
  # logos:
  #   "terraref-logo.png": <base64 values>

# -------------------------------------------------------------------------------

## All data for BETYDB will be stored in PostgreSQL
postgresql:
  ## enabled should the postgresql chart be installed as well. If not make
  ## sure that the other values are provied to get access to the database.
  enabled: true

  ## use bitnami legacy image
  image:
    registry: docker.io
    repository: bitnamilegacy/postgresql
    tag: "11.8.0"

  ## it takes some time to start postgresql, wait 5 min before start liveness.
  livenessProbe:
    initialDelaySeconds: 300

  ## postgresqlHost host where postgresql is installed.
  # postgresqlHost: postgres

  ## postgresqlPort port to connect to postgresql
  # postgresqlPort: 5432

  auth:
    ## enablePostgresUser adds the postgres user This user will have superuser abilities.
    # enablePostgresUser: true

    ## postgresPassword the password for postgres, if using auto generated
    ## password make sure to save the password as described in the notes. When upgrading
    ## you will need to provide this secret otherwise a new secret will be generated but
    ## not saved in the database.
    postgresPassword: supersecret

  # we will only configure the primary database
  primary:
    # need more space
    persistence:
      size: 20Gi

# -------------------------------------------------------------------------------

nameOverride: ""
fullnameOverride: ""

# -------------------------------------------------------------------------------

service:
  type: ClusterIP
  port: 8000

# -------------------------------------------------------------------------------

## Configure the ingress resource that allows you to access the
## BETY installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## Set to true to enable ingress record generation
  enabled: false

  ## Ingress path
  path: /

  ## The list of hostnames to be covered with this ingress record.
  ## Most likely this will be just one host, but in the event more hosts are needed, this is an array
  hosts: []
  #  - bety.example.com

  tls: false
  # secretName: bety.example.com.tls

  ## Ingress annotations done as key:value pairs
  ##
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/annotations.md
  ##
  annotations:
  #  kubernetes.io/ingress.class: nginx
  #  kubernetes.io/tls-acme: true

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi


## Node selector
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector: {}

serviceAccount:

  # Specifies whether a service account should be added to the deployment
  enabled: false

  # Specifies whether a service account should be created
  create: false

  # Annotations to add to the service account
  annotations: {}

  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## Tolerations
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

## Affinity
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

## Hook Affinity
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
hooks:
  affinity: {}
